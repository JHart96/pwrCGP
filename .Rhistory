net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
sim_data <- simulate_data(20, 20, 2.0, 0.5)
X <- sim_data$X
D <- sim_data$D
net_cor(X, D)
net_cor(X, D, show_diagnostic = FALSE)
net_cor(X, D, show_diagnostic = FALSE)
sim_data <- simulate_data(20, 10, 0.25, 0.5)
X <- sim_data$X
D <- sim_data$D
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::document()
?net_cor
devtools::document()
?net_cor
?net_cor
devtools::document()
?net_cor
devtools::load_all()
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
pwr.nodereg(10, 0.5, 2, 0.5, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
sim_data <- simulate_data_gp(20, 100, 2, 0.5)
X <- sim_data$X
D <- sim_data$D
net_cor(X, D)
pwr_nodereg(10, 0.5, 2, 0.5, D)
pwr_nodereg(20, 0.5, 2, 0.5, D)
pwr.nodereg(10, 0.5, 2, 0.5, D)
pwr_nodereg(10, 0.5, 2, 0.5, D)
pwr_nodereg(10, 0.5, 2, 0.5, mean(D))
sim_data <- simulate_data_gp(20, 100, 2, 0.5)
X <- sim_data$X
D <- sim_data$D
devtools::load_all()
pwr_nodereg(10, 0.5, 2, 0.5, D)
pwr_nodereg(10, 0.5, 2, 0.5, mean(D))
install.packages("usethat")
library(usethis)
usethis::use_vignette("example")
library(pwrIRGP)
devtools::load_all()
devtools::install()
library(pwrIRGP)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(pwrIRGP)
sim_data <- simulate_data_gp(20, 10, 2, 0.5)
X <- sim_data$X # 20 x 20 symmetric matrix of integer observation counts.
D <- sim_data$D # 20 x 20 matrix of positive real-valued sampling times.
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X, D
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
X
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
set.seed(123)
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
set.seed(123)
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
set.seed(111)
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
set.seed(1)
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
net_cor(X, D)
?pwr_nodereg
pwr_nodereg
devtools::document()
devtools::install()
?pwr_nodereg
social_differentiation <- summary_obj[5, 1]
summary_obj <- net_cor(X, D)
summary_obj
social_differentiation <- summary_obj[5, 1]
interaction_rate <- summary_obj[4, 1]
sampling_times <- D # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
power_analysis_nodal(20, effect, social_differentiation, interaction_rate, sampling_times)
social_differentiation <- summary_obj[5, 1]
interaction_rate <- summary_obj[4, 1]
sampling_times <- D # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
pwr_nodereg(20, effect, social_differentiation, interaction_rate, sampling_times)
social_differentiation <- summary_obj[5, 1]
interaction_rate <- summary_obj[4, 1]
sampling_times <- mean(D) # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
pwr_nodereg(20, effect, social_differentiation, interaction_rate, sampling_times)
social_differentiation <- summary_obj[5, 1]
interaction_rate <- summary_obj[4, 1]
sampling_times <- D # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
pwr_nodereg(8, effect, social_differentiation, interaction_rate, sampling_times)
pwr_elbow(social_differentiation, rho_max=0.99) # Use rho_max=0.99 as in the paper.
devtools::load_all()
pwr_elbow(social_differentiation, rho_max=0.99) # Use rho_max=0.99 as in the paper.
pwr_elbow
pwr_elbow(social_differentiation, rho_max=0.99) # Use rho_max=0.99 as in the paper.
devtools::load_all()
pwr_elbow(social_differentiation, rho_max=0.99) # Use rho_max=0.99 as in the paper.
library(pwrIRGP)
pwr_elbow(social_differentiation, rho_max=0.99) # Use rho_max=0.99 as in the paper.
devtools::install()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(pwrIRGP)
set.seed(1)
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
summary_obj <- net_cor(X, D)
summary_obj
social_differentiation <- summary_obj[5, 1]
interaction_rate <- summary_obj[4, 1]
sampling_times <- D # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
pwr_nodereg(8, effect, social_differentiation, interaction_rate, sampling_times)
pwr_elbow(social_differentiation, rho_max=0.99) # Use rho_max=0.99 as in the paper.
library(devtools)
devtools::build_vignettes()
devtools::build_manual()
devtools::build()
devtools::build()
remove.packages("pwrIRGP", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
devtools::install_github("JHart96/pwrIRGP")
library(pwrIRGP)
set.seed(1)
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
summary_obj <- net_cor(X, D)
summary_obj
social_differentiation <- summary_obj[5, 1]
interaction_rate <- summary_obj[4, 1]
sampling_times <- D # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
pwr_nodereg(8, effect, social_differentiation, interaction_rate, sampling_times)
pwr_elbow(social_differentiation, rho_max=0.99) # Use rho_max=0.99 as in the paper.
library(pwrIRGP)
set.seed(1)
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
summary_obj <- net_cor(X, D)
summary_obj
social_differentiation <- summary_obj[5, 1]
interaction_rate <- summary_obj[4, 1]
sampling_times <- D # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
pwr_nodereg(8, effect, social_differentiation, interaction_rate, sampling_times)
pwr_elbow(social_differentiation, rho_max=0.99) # Use rho_max=0.99 as in the paper.
devtools::load_all()
summary_obj <- net_cor(X, D)
summary_obj
devtools::build()
devtools::build()
library(pwrIRGP)
set.seed(1)
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
summary_obj <- net_cor(X, D)
summary_obj
library(devtools)
load_all()
summary_obj <- net_cor(X, D)
summary_obj
load_all()
summary_obj <- net_cor(X, D)
summary_obj
load_all()
summary_obj
summary_obj <- net_cor(X, D)
summary_obj
load_all()
summary_obj <- net_cor(X, D)
summary_obj <- net_cor(X, D)
load_all()
summary_obj <- net_cor(X, D)
load_all()
summary_obj <- net_cor(X, D)
warnings()
load_all()
summary_obj <- net_cor(X, D)
load_all()
summary_obj <- net_cor(X, D)
load_all()
summary_obj <- net_cor(X, D)
load_all()
summary_obj <- net_cor(X, D)
load_all()
summary_obj <- net_cor(X, D)
load_all()
summary_obj <- net_cor(X, D)
load_all()
summary_obj <- net_cor(X, D)
load_all()
summary_obj <- net_cor(X, D)
load_all()
summary_obj <- net_cor(X, D)
lm
?lm.fit
load_all()
load_all()
net_cor(X, D)
print(net_cor(X, D))
load_all()
print(net_cor(X, D))
net_cor(X, D)
net_cor(X, D)
pwr_nodereg(8, 0.5, 1.23, 0.137)
?pwr_nodereg
pwr_nodereg(8, 0.5, 1.23, 0.137, D[upper.tri(D)])
warnings()
pwr_nodereg(8, 0.5, 1.23, 0.137, D[upper.tri(D)])
dim(D)
pwr_nodereg(8, 0.5, 1.23, 0.137, D)
load_all()
load_all()
net_cor(X, D)
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
pwr_nodereg(8, 0.5, list(1.23, 1.77, 2.57), list(0.137, 0.274, 0.549), D)
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
load_all()
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
load_all()
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
load_all()
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
load_all()
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
load_all()
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
load_all()
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
load_all()
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
print(pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D))
load_all()
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
load_all()
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
load_all()
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
load_all()
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
load_all()
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
summary_table <- matrix(0, nrow=k, ncol=3)
colnames(summary_table) <- c("Social Differentiation", "Interaction Rate", "Power")
summary_table <- matrix(0, nrow=k, ncol=3)
colnames(summary_table) <- c("Social Differentiation", "Interaction Rate", "Power")
summary_table <- matrix(0, nrow=k, ncol=3)
summary_table <- matrix(0, nrow=3, ncol=3)
summary_table
rownames(summary_table) <- NULL
summary_table
rownames(summary_table) <- c()
summary_table
load_all()
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
print(summary_table)
print(summary_table, row.names=FALSE)
print(summary_table, row.names=TRUE)
rownames(summary_table) <- c()
rownames(summary_table) <- NULL
print(summary_table, row.names=TRUE)
print(summary_table, row.names=FALSE)
rownames(summary_table) <- NULL
print(summary_table, row.names=FALSE)
rownames(summary_table) <- 0
rownames(summary_table) <- c("", "", "")
print(summary_table, row.names=FALSE)
print(summary_table, row.names=TRUE)
rownames(summary_table) <- ""
rownames(summary_table) <- rep("", 3)
load_all()
pwr_nodereg(8, 0.5, c(1.23, 1.77, 2.57), c(0.137, 0.274, 0.549), D)
net_cor(X, D)
net_cor(X, D)
social_differentiations <- summary_obj[5, c(1, 3, 4)]
interaction_rates <- summary_obj[4, c(1, 3, 4)]
sampling_times <- D # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
pwr_nodereg(8, effect, social_differentiations, interaction_rates, sampling_times)
social_differentiations <- summary_obj[5, c(1, 3, 4)]
interaction_rates <- summary_obj[4, c(1, 3, 4)]
sampling_times <- D # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
pwr_nodereg(8, effect, social_differentiations, interaction_rates, sampling_times)
social_differentiations <- summary_obj[5, c(3, 1, 4)]
interaction_rates <- summary_obj[4, c(3, 1, 4)]
sampling_times <- D # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
pwr_nodereg(8, effect, social_differentiations, interaction_rates, sampling_times)
pwr_elbow(social_differentiation, rho_max=0.99) # Use rho_max=0.99 as in the paper.
pwr_elbow(social_differentiations, rho_max=0.99) # Use rho_max=0.99 as in the paper.
social_differentiations <- summary_obj[5, c(3, 1, 4)]
interaction_rates <- summary_obj[4, c(3, 1, 4)]
sampling_times <- D # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
pwr_nodereg(8, effect, social_differentiations[1], interaction_rates[1], sampling_times)
load_all()
social_differentiations <- summary_obj[5, c(3, 1, 4)]
interaction_rates <- summary_obj[4, c(3, 1, 4)]
sampling_times <- D # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
pwr_nodereg(8, effect, social_differentiations, interaction_rates, sampling_times)
pwr_elbow(social_differentiations, rho_max=0.99) # Use rho_max=0.99 as in the paper.
load_all()
pwr_elbow(social_differentiations, rho_max=0.99) # Use rho_max=0.99 as in the paper.
load_all()
pwr_elbow(social_differentiations, rho_max=0.99) # Use rho_max=0.99 as in the paper.
load_all()
pwr_elbow(social_differentiations, rho_max=0.99) # Use rho_max=0.99 as in the paper.
load_all()
pwr_elbow(social_differentiations, rho_max=0.99) # Use rho_max=0.99 as in the paper.
net_cor(X, D)
social_differentiations <- summary_obj[5, c(3, 1, 4)]
interaction_rates <- summary_obj[4, c(3, 1, 4)]
sampling_times <- D # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
pwr_nodereg(8, effect, social_differentiations, interaction_rates, sampling_times)
pwr_elbow(social_differentiations, rho_max=0.99) # Use rho_max=0.99 as in the paper.
install()
library(pwrIRGP)
set.seed(1)
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
net_cor(X, D)
social_differentiations <- summary_obj[5, c(3, 1, 4)] # 3, 1, 4 gives the lower CI, median, and upper CI.
net_cor_obj <- net_cor(X, D)
net_cor_obj <- net_cor(X, D)
net_cor_obj
social_differentiations <- summary_obj[5, c(3, 1, 4)] # 3, 1, 4 gives the lower CI, median, and upper CI.
social_differentiations <- net_cor_obj[5, c(3, 1, 4)] # c(3, 1, 4) gives the lower CI, median, and upper CI.
social_differentiations <- net_cor_obj$summary[5, c(3, 1, 4)] # c(3, 1, 4) gives the lower CI, median, and upper CI.
interaction_rates <- net_cor_obj$summary[4, c(3, 1, 4)]
sampling_times <- D # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
pwr_nodereg(8, effect, social_differentiations, interaction_rates, sampling_times)
pwr_elbow(social_differentiations, rho_max=0.99) # Use rho_max=0.99 as in the paper.
