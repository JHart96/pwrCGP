library(devtools)
document()
load_all()
?pwr.nodereg
document()
load_all()
?pwr.nodereg
?pwr::pwr.r.test
exp(1)
exp(0)
load_all()
load_all
devtools::load_all()
simulate_data(5, 20, 2.0, 0.5)
devtools::load_all()
simulate_data(5, 20, 2.0, 0.5)
devtools::load_all()
simulate_data(5, 20, 2.0, 0.5)
sim_data <- simulate_data(10, 20, 2.0, 0.5)
X <- sim_data$X
D <- sim_data$D
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
devtools::load_all(export_all=FALSE)
hmean()
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
# Diagnostic plot
plot(rnbinom(100, a_, b_/(b_ + d)))
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
sim_data <- simulate_data(20, 20, 2.0, 0.5)
X <- sim_data$X
D <- sim_data$D
net_cor(X, D)
net_cor(X, D, show_diagnostic = FALSE)
net_cor(X, D, show_diagnostic = FALSE)
sim_data <- simulate_data(20, 10, 0.25, 0.5)
X <- sim_data$X
D <- sim_data$D
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::document()
?net_cor
devtools::document()
?net_cor
?net_cor
devtools::document()
?net_cor
devtools::load_all()
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
devtools::load_all()
pwr.nodereg(10, 0.5, 2, 0.5, D)
pwr.nodereg(10, 0.5, 2, 0.5, D)
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
devtools::load_all()
net_cor(X, D)
net_cor(X, D)
sim_data <- simulate_data_gp(20, 100, 2, 0.5)
X <- sim_data$X
D <- sim_data$D
net_cor(X, D)
pwr_nodereg(10, 0.5, 2, 0.5, D)
pwr_nodereg(20, 0.5, 2, 0.5, D)
pwr.nodereg(10, 0.5, 2, 0.5, D)
pwr_nodereg(10, 0.5, 2, 0.5, D)
pwr_nodereg(10, 0.5, 2, 0.5, mean(D))
sim_data <- simulate_data_gp(20, 100, 2, 0.5)
X <- sim_data$X
D <- sim_data$D
devtools::load_all()
pwr_nodereg(10, 0.5, 2, 0.5, D)
pwr_nodereg(10, 0.5, 2, 0.5, mean(D))
install.packages("usethat")
library(usethis)
usethis::use_vignette("example")
library(pwrIRGP)
devtools::load_all()
devtools::install()
library(pwrIRGP)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(pwrIRGP)
sim_data <- simulate_data_gp(20, 10, 2, 0.5)
X <- sim_data$X # 20 x 20 symmetric matrix of integer observation counts.
D <- sim_data$D # 20 x 20 matrix of positive real-valued sampling times.
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X, D
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
X
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
set.seed(123)
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
set.seed(123)
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
set.seed(111)
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
set.seed(1)
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
net_cor(X, D)
?pwr_nodereg
pwr_nodereg
devtools::document()
devtools::install()
?pwr_nodereg
social_differentiation <- summary_obj[5, 1]
summary_obj <- net_cor(X, D)
summary_obj
social_differentiation <- summary_obj[5, 1]
interaction_rate <- summary_obj[4, 1]
sampling_times <- D # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
power_analysis_nodal(20, effect, social_differentiation, interaction_rate, sampling_times)
social_differentiation <- summary_obj[5, 1]
interaction_rate <- summary_obj[4, 1]
sampling_times <- D # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
pwr_nodereg(20, effect, social_differentiation, interaction_rate, sampling_times)
social_differentiation <- summary_obj[5, 1]
interaction_rate <- summary_obj[4, 1]
sampling_times <- mean(D) # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
pwr_nodereg(20, effect, social_differentiation, interaction_rate, sampling_times)
social_differentiation <- summary_obj[5, 1]
interaction_rate <- summary_obj[4, 1]
sampling_times <- D # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
pwr_nodereg(8, effect, social_differentiation, interaction_rate, sampling_times)
pwr_elbow(social_differentiation, rho_max=0.99) # Use rho_max=0.99 as in the paper.
devtools::load_all()
pwr_elbow(social_differentiation, rho_max=0.99) # Use rho_max=0.99 as in the paper.
pwr_elbow
pwr_elbow(social_differentiation, rho_max=0.99) # Use rho_max=0.99 as in the paper.
devtools::load_all()
pwr_elbow(social_differentiation, rho_max=0.99) # Use rho_max=0.99 as in the paper.
library(pwrIRGP)
pwr_elbow(social_differentiation, rho_max=0.99) # Use rho_max=0.99 as in the paper.
devtools::install()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(pwrIRGP)
set.seed(1)
sim_data <- simulate_data_gp(8, 10, 2, 0.5)
X <- sim_data$X # 8 x 8 symmetric matrix of integer observation counts.
D <- sim_data$D # 8 x 8 matrix of positive real-valued sampling times.
X
summary_obj <- net_cor(X, D)
summary_obj
social_differentiation <- summary_obj[5, 1]
interaction_rate <- summary_obj[4, 1]
sampling_times <- D # Matrix of sampling times OR Single value of mean sampling times
# Calculate power of nodal regression for effect size r = 0.5
effect <- 0.5
pwr_nodereg(8, effect, social_differentiation, interaction_rate, sampling_times)
pwr_elbow(social_differentiation, rho_max=0.99) # Use rho_max=0.99 as in the paper.
library(devtools)
devtools::build_vignettes()
devtools::build_manual()
devtools::build()
